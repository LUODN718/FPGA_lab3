`timescale 1ns / 1ns

module vga_pic (
    input  wire vga_clk,
    input  wire sys_rst_n,
    input  wire [9:0] pix_x,
    input  wire [9:0] pix_y,

    output wire [15:0] pix_data
);

    localparam CHAR_X = (640 - 4*16) / 2;
    localparam CHAR_Y = (480 - 32) / 2;
    localparam SCALE = 2;  

    reg [7:0] font_rom [0:63];
    integer i;

    initial begin
        for (i = 0; i < 64; i = i + 1) font_rom[i] = 8'b0;

        // M (8x16)
        font_rom[0*16+1]  = 8'b01111110; font_rom[0*16+2]  = 8'b01000100;
        font_rom[0*16+3]  = 8'b01000100; font_rom[0*16+4]  = 8'b01000100;
        font_rom[0*16+5]  = 8'b01010100; font_rom[0*16+6]  = 8'b01010100;
        font_rom[0*16+7]  = 8'b01010100; font_rom[0*16+8]  = 8'b01010100;
        font_rom[0*16+9]  = 8'b01010100; font_rom[0*16+10] = 8'b01000100;
        font_rom[0*16+11] = 8'b01000100; font_rom[0*16+12] = 8'b01000100;
        font_rom[0*16+13] = 8'b01000100; font_rom[0*16+14] = 8'b01111110;

        // U
        font_rom[1*16+1]  = 8'b01000100; font_rom[1*16+2]  = 8'b01000100;
        font_rom[1*16+3]  = 8'b01000100; font_rom[1*16+4]  = 8'b01000100;
        font_rom[1*16+5]  = 8'b01000100; font_rom[1*16+6]  = 8'b01000100;
        font_rom[1*16+7]  = 8'b01000100; font_rom[1*16+8]  = 8'b01000100;
        font_rom[1*16+9]  = 8'b01000100; font_rom[1*16+10] = 8'b01000100;
        font_rom[1*16+11] = 8'b01000100; font_rom[1*16+12] = 8'b01000100;
        font_rom[1*16+13] = 8'b01000100; font_rom[1*16+14] = 8'b00111000;

        // S
        font_rom[2*16+1]  = 8'b00111110; font_rom[2*16+2]  = 8'b01000000;
        font_rom[2*16+3]  = 8'b01000000; font_rom[2*16+4]  = 8'b01000000;
        font_rom[2*16+5]  = 8'b00111100; font_rom[2*16+6]  = 8'b00000110;
        font_rom[2*16+7]  = 8'b00000011; font_rom[2*16+8]  = 8'b00000110;
        font_rom[2*16+9]  = 8'b00011100; font_rom[2*16+10] = 8'b01000000;
        font_rom[2*16+11] = 8'b01000000; font_rom[2*16+12] = 8'b01000000;
        font_rom[2*16+13] = 8'b01000000; font_rom[2*16+14] = 8'b00111110;

        // T
        font_rom[3*16+1]  = 8'b01111111; font_rom[3*16+2]  = 8'b00010000;
        font_rom[3*16+3]  = 8'b00010000; font_rom[3*16+4]  = 8'b00010000;
        font_rom[3*16+5]  = 8'b00010000; font_rom[3*16+6]  = 8'b00010000;
        font_rom[3*16+7]  = 8'b00010000; font_rom[3*16+8]  = 8'b00010000;
        font_rom[3*16+9]  = 8'b00010000; font_rom[3*16+10] = 8'b00010000;
        font_rom[3*16+11] = 8'b00010000; font_rom[3*16+12] = 8'b00010000;
        font_rom[3*16+13] = 8'b00010000; font_rom[3*16+14] = 8'b00010000;
    end

    wire in_char = (pix_x >= CHAR_X && pix_x < CHAR_X + 4*8*2) &&
                   (pix_y >= CHAR_Y && pix_y < CHAR_Y + 16*2);

    wire [9:0] local_x = pix_x - CHAR_X;
    wire [9:0] local_y = pix_y - CHAR_Y;

    wire [1:0] char_idx = local_x / (8*2);
    wire [3:0] font_y   = local_y / 2;
    wire [2:0] font_x   = (local_x / 2) % 8;

    wire pixel_on = in_char ? font_rom[{char_idx, 4'd0} + font_y][7 - font_x] : 0;

    assign pix_data = (pixel_on) ? 16'h0000 : 16'hFFFF;

endmodule

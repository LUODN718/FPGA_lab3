`timescale 1ns/1ps

module vga_pic (
    input  wire        vga_clk,
    input  wire        sys_rst_n,
    input  wire [9:0]  pix_x,
    input  wire [9:0]  pix_y,
    output reg  [15:0] pix_data
);

    localparam H_VALID = 10'd640;
    localparam V_VALID = 10'd480;
    localparam WHITE   = 16'hFFFF;
    localparam BLACK   = 16'h0000;

    localparam CHAR_WIDTH  = 8;
    localparam CHAR_HEIGHT = 16;
    localparam NUM_CHARS   = 4;
    localparam TOTAL_WIDTH = CHAR_WIDTH * NUM_CHARS;
    localparam START_X     = (H_VALID - TOTAL_WIDTH) / 2;
    localparam START_Y     = (V_VALID - CHAR_HEIGHT) / 2;

    reg [7:0] font_rom [0:63];

    integer i;
    initial begin
        for (i = 0; i < 64; i = i + 1) font_rom[i] = 8'h00; 

        // M
        font_rom[ 0] = 8'he0; font_rom[ 1] = 8'h40; font_rom[ 2] = 8'h80; font_rom[ 3] = 8'h40;
        font_rom[ 4] = 8'he0; font_rom[ 8] = 8'h0f; font_rom[12] = 8'h0f;

        // U
        font_rom[16] = 8'he0; font_rom[20] = 8'he0;
        font_rom[24] = 8'h07; font_rom[25] = 8'h08; font_rom[26] = 8'h08; font_rom[27] = 8'h08; font_rom[28] = 8'h07;

        // S
        font_rom[32] = 8'hc0; font_rom[33] = 8'h20; font_rom[34] = 8'h20; font_rom[35] = 8'h20; font_rom[36] = 8'h40;
        font_rom[40] = 8'h04; font_rom[41] = 8'h09; font_rom[42] = 8'h09; font_rom[43] = 8'h09; font_rom[44] = 8'h06;

        // T
        font_rom[48] = 8'h20; font_rom[49] = 8'h20; font_rom[50] = 8'he0; font_rom[51] = 8'h20; font_rom[52] = 8'h20;
        font_rom[58] = 8'h0f;
    end

    reg [9:0] rel_x, rel_y;
    reg [1:0] char_idx;
    reg [2:0] bit_x;
    reg [3:0] line_y;
    reg [5:0] rom_addr;
    reg [7:0] rom_data;
    reg       pixel_bit;

    always @(posedge vga_clk or negedge sys_rst_n) begin
        if (!sys_rst_n) begin
            pix_data <= BLACK;
        end else begin
            pix_data <= BLACK;

            if (pix_x >= START_X && pix_x < START_X + TOTAL_WIDTH &&
                pix_y >= START_Y && pix_y < START_Y + CHAR_HEIGHT) begin

                rel_x = pix_x - START_X;
                rel_y = pix_y - START_Y;

                char_idx = rel_x[4:3];      // 0~3
                bit_x    = rel_x[2:0];      // 0~7
                line_y   = rel_y[3:0];      // 0~15

                rom_addr = char_idx * 16 + line_y;
                rom_data = font_rom[rom_addr];
                pixel_bit = rom_data[7 - bit_x];

                pix_data <= pixel_bit ? WHITE : BLACK;
            end
        end
    end

endmodule
